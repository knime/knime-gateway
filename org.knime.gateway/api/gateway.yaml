---
# This is the Swagger spec, describing the KNIME gateway.  
swagger: "2.0"
info:
  description: KNIME Gateway
  version: 1.0.0
  title: KNIME Gateway
# TODO
host: knime.org
# TODO
basePath: /rest/v4
schemes:
- http
- https

tags:
- name: Workflow
  description: Operations on workflows.
- name: Node
  description: Operations on single nodes.
  
parameters:
 job-id:
  name: job-id
  in: path
  description: ID the job the workflow is requested for
  required: true
  type: string

paths:

  # the workflow endpoint
  /jobs/{job-id}/workflow:
    get:
      tags:
      - Workflow
      description: Retrieves the complete structure of the workflow (nodes, connections, annotations).
      operationId: getWorkflow
      produces:
      - application/json
      parameters:
        - $ref: "#/parameters/job-id"
        - name: node-id
          in: query
          description: The ID of the node this sub(!)-workflow is requested for. If not given, the root-workflow will be returned.
          required: false
          type: string
      responses:
        200:
          description: Successful response, with a representation of the Workflow.
          schema:
            $ref: "#/definitions/Workflow"
        404:
          description: The requested worklow was not found.
    
    
  # the node endpoint
  /jobs/{job-id}/workflow/node/{node-id}:
    get:
      tags:
      - Node
      description: Retrieves the node for the given node-id.
      operationId: getNode
      produces:
      - application/json
      parameters:
        - $ref: "#/parameters/job-id"
        - name: node-id
          in: query
          description: The ID of the node the information is requested for.
          required: true
          type: string
      responses:
        200:
          description: Successful response, with a representation of the Node.
          schema:
            $ref: "#/definitions/Node"
        404:
          description: The requested node was not found.
  
  # endpoint for node settings        
  /jobs/{job-id}/workflow/node/{node-id}/settings:
    get:
      tags:
      - Node
      description: Retrieves the node's settings for the given node-id.
      operationId: getNodeSettings
      produces:
      - application/json
      parameters:
        - $ref: "#/parameters/job-id"
        - name: node-id
          in: query
          description: The ID of the node the information is requested for.
          required: true
          type: string
      responses:
        200:
          description: Successful response, with a json-representation of the settings
          schema:
            type: string
        404:
          description: The requested node was not found.

definitions:
# A comment on object/schema/model inheritance: polymorphism/subtyping in swagger is achieved by the 'allOf'-property
# and the specification of a 'dicriminator'-property to be able to tell them apart (see, e.g., Node).
# However, in Swagger 2.0 it has it's issues and it has been improved in OpenAPI 3.0 (introducing a mapping of
# discriminator-values to the respective schemas). Here, one could at least set the 'discriminator'-property
# to "read-only" and provide the respective default values in the spec already.
# But I chose to not clutter the API-spec too much at the expense of few actually unnecessary method calls within the
# generated java-code (the 'discriminator'-property has to be explicitly set every time an object is created). 


  Annotation:
    description: A text annotation.
    type: object
    discriminator: type
    required:
     - type
    properties:
      type:
        description: Discriminator for inheritance. Must be the base name of this type/schema.
        type: string
      text:
        type: string
      backgroundColor:
        type: integer
      bounds:
        $ref: "#/definitions/Bounds"
      textAlignment:
        type: string
      borderSize:
        type: integer
      borderColor:
        type: integer
      defaultFontSize:
        type: integer
      version:
        type: integer
      styleRanges:
        description: Defines ranges of different styles within the annotation.
        type: array
        items:
          $ref: "#/definitions/StyleRange"
        
  Bounds:
    description: Node dimensions - position and size.
    type: object
    properties:
      x:
        type: integer
      y:
        type: integer
      width:
        type: integer
      height:
        type: integer
        
  Connection:
    description: A single connection between two nodes.
    type: object
    required:
      - dest
      - destPort
      - source
      - sourcePort
    properties:
      dest:
        type: string
        description: The destination node.
      destPort:
        type: integer
        description: The destination port, starting at 0.
      source:
        type: string
        description: The source node.
      sourcePort:
        type: integer
        description: The source port, starting at 0.
      deletable:
        type: boolean
        description: Whether the connection can currently be deleted.
      flowVariablePortConnection:
        type: boolean
        description: Whether it's a connection between two flow variable ports.
      bendPoints:
        type: array
        items:
           $ref: '#/definitions/XY'
      type:
        type: string
        enum: [STD, WFMIN, WFMOUT, WFMTHROUGH]
        description: The type of the connection (standard, workflow input / output /through).
        
              
  JobManager:
    description: node's job manager
    type: object
    required:
      - id
    properties:
      id:
        type: string 

  MetaPortInfo:
    description: The port of a metanode.
    type: object
    required:
      - portType
    properties:
      portType:
        description: The type.
        $ref: "#/definitions/PortType"
      connected:
        description: Whether it is connected.
        type: boolean
      message:
        description: The message (summary of upstream node port).
        type: string
      oldIndex:
        description: The old index.
        type: integer
      newIndex:
        description: The new index.
        type: integer        
        
  NativeNode:
    description: Native node extension of a node.
    #inheritance
    allOf:
      - $ref: '#/definitions/Node'
      - type: object
        required:
          - nodeFactoryKey
        properties:
          nodeFactoryKey:
            description: The key/ID of the node factory defining all details.
            $ref: "#/definitions/NodeFactoryKey"
            
  NodeAnnotation:
    description: The annotation to a node.
    allOf:
      - $ref: "#/definitions/Annotation"
      - type: object
        properties:
          default:
            description: Default node annotation.
            type: boolean
    
  Node:
    description: A node.
    type: object
    required:
      - name
      - nodeID
      - nodeType
      - nodeState
      - type
      - rootWorkflowID
    discriminator: type
    properties:
      type:
        type: string
        description: Discriminator for inheritance. Must be the base name of this type/schema.
      name:
        description: The node's name.
        type: string
      nodeID:
        description: The ID of the node.
        type: string
      nodeType:
        description: The type of the node.
        type: string
        enum: [
                Source,
                Sink,
                Learner,
                Predictor,
                Manipulator,
                Visualizer,
                Meta,
                LoopStart,
                LoopEnd,
                ScopeStart,
                ScopeEnd,
                QuickForm,
                Other,
                Missing,
                Unknown,
                Subnode,
                VirtualIn,
                VirtualOut
              ]
      parentNodeID:
        description: The parent node id of the node or not present if it's the root node.
        type: string
      rootWorkflowID:
        description: The id of the root workflow this node is contained in or represents.
        type: string
      nodeMessage:
        description: The current node message (warning, error, none).
        $ref: '#/definitions/NodeMessage'
      nodeState:
        description: The state of the node.
        type: string
        enum: [
                IDLE,
                CONFIGURED,
                UNCONFIGURED_MARKEDFOREXEC,
                CONFIGURED_MARKEDFOREXEC,
                EXECUTED_MARKEDFOREXEC,
                CONFIGURED_QUEUED,
                EXECUTED_QUEUED,
                PREEXECUTE,
                EXECUTING,
                EXECUTINGREMOTELY,
                POSTEXECUTE,
                EXECUTED
              ]
      inPorts:
        description: The list of inputs.
        type: array
        items:
          $ref: "#/definitions/NodeInPort"
      outPorts:
        description: The list of outputs.
        type: array
        items:
          $ref: "#/definitions/NodeOutPort"
      deletable:
        description: Whether the node is deletable.
        type: boolean
        default: false
      hasDialog:
        description: Whether the node has a configuration dialog / user settings.
        type: boolean
      nodeAnnotation:
        description: The annotation below the node.
        $ref: "#/definitions/NodeAnnotation"
      jobManager:
        description: The job manager (e.g. cluster or streaming).
        $ref: '#/definitions/JobManager'
      uIInfo:
        $ref: "#/definitions/NodeUIInfo"
        
  NodeFactoryKey:
    description: Object to identify a node-specific node implementation.
    type: object
    required:
      - className
    properties:
      className:
        description: The fully qualified java classname.
        type: string
      settings:
        description: Additional settings in order to be able to re-create nodes. Only required in case of 'dynamic' node factories.
        type: string
      
  NodeInPort:
    description: An input port of a node.
    allOf:
      - $ref: "#/definitions/NodePort"
        
  NodeMessage:
    description: node message
    type: object
    required:
     - message
    properties:
      type:
        type: string
      message:
        type: string
        
  NodeOutPort:
    description: The output port of a node.
    allOf:
      - $ref: "#/definitions/NodePort"
        
  NodePort:
    description: A single port of a node.
    type: object
    discriminator: type
    required:
    - type
    - portIndex
    - portType
    properties:
      type:
        description: Discriminator for inheritance. Must be the base name of this type/schema.
        type: string
      portIndex:
        description: The index starting at 0.
        type: integer
      portType:
        description: The type of the port.
        $ref: "#/definitions/PortType"
      portName:
        description: The name of the port.
        type: string
        
  NodeUIInfo:
    type: object
    properties:
      bounds:
        $ref: "#/definitions/Bounds"
      symbolRelative:
        type: boolean
      hasAbsoluteCoordinates:
        type: boolean
      dropLocation:
        type: boolean
      snapToGrid:
        type: boolean      
  
  PortType:
    description: The type of a port.
    type: object
    required:
     - portObjectClassName
     - optional
    properties:
      portObjectClassName:
        description: Port type class name (for coloring, connection checks).
        type: string
      optional:
        description: Whether the port is optional, only applies to input ports.
        type: boolean
        
  StyleRange:
    description: Defines the style of a range (e.g. within a workflow annotation).
    type: object
    properties:
      start:
        description: Style range start.
        type: integer
      length:
        description: Style range length.
        type: integer
      fontName:
        description: Style range font name.
        type: string
      fontStyle:
        description: The font style, e.g. normal, bold or italic.
        type: string
        enum: [normal, bold, italic]
      fontSize:
        description: Style range font size.
        type: integer
      foregroundColor:
        description: Style range foreground color.
        type: integer
        
  WorkflowAnnotation:
    description: A workflow annotation.
    allOf:
      - $ref: "#/definitions/Annotation"
        
  Workflow:
    type: object
    description: The structure of a workflow.
    properties:
      nodes:
        description: The node map.
        #string to Node map
        type: object
        additionalProperties:
          type: object
          $ref: '#/definitions/Node'
      connections:
        description: The list of connections.
        type: array
        items:
          $ref: '#/definitions/Connection'
      metaInPortInfos:
        description: The inputs of a metanode (if this workflow is one).
        type: array
        items:
          $ref: "#/definitions/MetaPortInfo"
      metaOutPortInfos:
        description: The outputs of a metanode (if this workflow is one).
        type: array
        items:
          $ref: "#/definitions/MetaPortInfo"
      workflowAnnotations:
        description: List of all workflow annotations. TODO could be moved to an extra UI service in order to not polute the WorkflowEnt too much and separate UI logics.
        type: array
        items:
          $ref: "#/definitions/WorkflowAnnotation"
      workflowUIInfo:
        description: Additional workflow UI information such as grid settings, connection appearance etc. TODO could be moved to an extra UI service in order to not polute the WorkflowEnt too much and separate UI logics.
        $ref: "#/definitions/WorkflowUIInfo"
        
  WorkflowNode:
    description: A node containing (referencing) a workflow (also referred to it as metanode)
    allOf:
      - $ref: "#/definitions/Node"
      - type: object
        properties:
          workflowIncomingPorts:
            description: List of all incoming workflow ports.
            type: array
            items:
              $ref: "#/definitions/NodeOutPort"
          workflowOutgoingPorts:
            description: List of all outgoing workflow ports.
            type: array
            items:
              $ref: "#/definitions/NodeInPort"
          encrypted:
            description: Whether the referenced workflow is encrypted is required to be unlocked before it can be accessed.
            type: boolean
  
  WorkflowUIInfo:
    description: Contains workflow UI-related properties such as grid settings, connection appearance etc. 
    type: object
    properties:
      gridX:
        description: Grid size in X direction.
        type: integer
      gridY:
        description: Grid size in Y direction.
        type: integer
      snapToGrid:
        description: Whether to snap to the grid.
        type: boolean
      showGrid:
        description: Whether to show the grid lines.
        type: boolean
      zoomLevel:
        description: Workflow zoom leve, i.e. its magnification.
        type: number
      hasCurvedConnection:
        description: Whether connections are rendered as curves.
        type: boolean
      connectionLineWidth:
        description: Width of the line connecting two nodes.
        type: integer
        
  WrappedWorkflowNode:
    description: A node wrapping (referencing) a workflow (also referred to it as wrapped metanode or subnode) that almost behaves as a ordinary node.
    allOf:
      - $ref: "#/definitions/Node"
      - type: object
        properties:
          workflowIncomingPorts:
            description: List of all incoming workflow ports.
            type: array
            items:
              $ref: "#/definitions/NodeOutPort"
          workflowOutgoingPorts:
            description: List of all outgoing workflow ports.
            type: array
            items:
              $ref: "#/definitions/NodeInPort"
          encrypted:
            description: Whether the referenced workflow is encrypted is required to be unlocked before it can be accessed.
            type: boolean
          virtualInNodeID:
            description: Node ID of the virtual in-node (i.e. source).
            type: string
          virtualOutNodeID:
            description: Node ID of the virtual out-node (i.e. sink).
            type: string
                    
  XY:
    type: object
    description: XY coordinate
    properties:
      x:
        type: integer
      y:
        type: integer
    
        
