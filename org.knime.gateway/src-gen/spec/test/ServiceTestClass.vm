/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package $package;

import static org.knime.gateway.services.ServiceManager.service;
import static org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;

#foreach( $import in $imports)
import $import;
#end

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.knime.gateway.server.KnimeGatewayServerManager;
import org.knime.gateway.services.ServerServiceConfig;
import org.knime.gateway.services.ServiceConfig;
import org.mockito.Matchers;
import org.mockito.Mockito;

/**
 * Tests essentially the client-server communication but not the service logic itself (the service is mocked). It tests
 * whether the service methods are called properly and the de-/serialization of the entities passed and returned.
 *
 * Test needs to be run as plugin test with the following system property set:
 * '-Djavax.ws.rs.ext.RuntimeDelegate=org.apache.cxf.jaxrs.impl.RuntimeDelegateImpl'
 *
 * @author Martin Horn, University of Konstanz
 */
// AUTO-GENERATED CODE; DO NOT MODIFY
public class ${name}Test {

    private ${name} m_serviceMock;
    private ServiceConfig m_serviceConfig;

    @Before
    public void setup() throws Exception {
        m_serviceMock = mock(${name}.class);
        m_serviceConfig = new ServerServiceConfig("localhost", 3000, "");

        //spin-up the server with the mocked service
        KnimeGatewayServerManager.startAllForTesting(3000, m_serviceMock);
    }

#foreach($method in $methods)
    @Test
    public void test_$method.getName()() {
##CREATE PARAMETER VALUES    
#foreach($param in $method.getParameters())
#if($foreach.count == 1)
		//create parameter values
#end
#set($type = $param.getType())
#if(${type.isEntity()})
		$type.toString() $param.getName() = ${param.getType().toString()}Test.createEnt(${param.getType().toString()}Test.createValueList());
#elseif($type.isEntityList())
		${type.toString()} $param.getName() = new ArrayList<>();
#foreach($i in [1..5])
		${param.getName()}.add(${param.getType().getTypeParameter(0).toString()}Test.createEnt(${param.getType().getTypeParameter(0).toString()}Test.createValueList()));
#end
#elseif($type.isPrimitiveList())
		${type.toString()} $param.getName() = new ArrayList<>();
#foreach($i in [1..5])
		${param.getName()}.add(${type.getTypeParameter(0).createRandomPrimitive(${i})});
#end
#elseif($type.isPrimitive())
		$type.toString() $param.getName() = $type.createRandomPrimitive(0);
#elseif($type.isPrimitiveOptional())
		$type.toString() $param.getName() = Optional.of($type.getTypeParameter(0).createRandomPrimitive(0));
#end
#end ##param-loop

#set($rettype = $method.getResult().getType())
##RETURNS VOID
#if($rettype.isVoid())
		//returns void - just call the method
		service(${name}.class).$method.getName()(#foreach($param in $method.getParameters())$param.getName()#if($foreach.hasNext), #end#end);
#else
##HANDLE RETURN VALUES
##CREATE RETURN VALUES 
		//create return value   
#if($rettype.isEntityList())
		${rettype.toString()} res = new ArrayList<>(5);
        List<List<Object>> valueLists = new ArrayList<List<Object>>(5);
#foreach($i in [1..5])
        List<Object> valList$i = ${rettype.getTypeParameter(0).toString()}Test.createValueList();
        valueLists.add(valList$i);
        res.add(${rettype.getTypeParameter(0).toString()}Test.createEnt(valList$i));
#end
#elseif($rettype.isPrimitiveList())
		${rettype.toString()} res = new ArrayList<>(5);
#foreach($i in [1..5])
        res.add(${rettype.getTypeParameter(0).createRandomPrimitive($i)});
#end
#elseif($rettype.isPrimitive())
		${rettype.toString()} res = ${rettype.createRandomPrimitive(0)};        
#elseif($rettype.isEntity())
		List<Object> values = ${rettype.toString("", "Test")}.createValueList();
        ${rettype.toString()} res = ${rettype.toString("", "Test")}.createEnt(values);
#end

##MOCK RETURN VALUE
		//mock return value
		Mockito.when(m_serviceMock.$method.getName()(#foreach($param in $method.getParameters())Matchers.anyVararg()#if($foreach.hasNext), #end#end)).thenReturn(res);

##CALL
		//call method
		${rettype.toString()} methodRes = service(${name}.class, m_serviceConfig).$method.getName()(#foreach($param in $method.getParameters())$param.getName()#if($foreach.hasNext), #end#end);

##COMPARE
		//compare results
#if($rettype.isEntityList())
        for (int i = 0; i < methodRes.size(); i++) {
            ${rettype.getTypeParameter(0).toString()}Test.testEnt(methodRes.get(i), valueLists.get(i));
        }
#elseif($rettype.isPrimitiveList())
		for (int i = 0; i < methodRes.size(); i++) {
			assertEquals(res.get(i), methodRes.get(i));
        }
#elseif($rettype.isEntity())
        ${rettype.toString()}Test.testEnt(methodRes, values);
#elseif($rettype.isPrimitive())
		assertEquals(res, methodRes);
#end
#end
    }

#end ##method-loop

    @After
    public void shutdown() throws Exception {
        KnimeGatewayServerManager.stopAll();
    }

}
