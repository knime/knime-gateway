{{>licenseInfo}}
package {{package}};

{{#imports}}
import {{import}};
{{/imports}}

{{#models}}
{{#model}}
import org.knime.gateway.v0.entity.{{name}}Ent;

/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 *
 {{>authors}}
 */
// AUTO-GENERATED CODE; DO NOT MODIFY
public class {{classname}} {{#parent}}extends {{{parent}}}{{/parent}} implements {{name}}Ent {

  {{#vars}}
  protected {{{datatypeWithEnum}}} m_{{name}};
  {{/vars}}
  
  {{^parent}}
  protected {{classname}}() {
    //for sub-classes
  }
  {{/parent}}
  
  private {{classname}}({{classname}}Builder builder) {
    {{#parent}}super();{{/parent}}
    {{#allVars}}
    {{#required}}
    if(builder.m_{{name}} == null) {
        throw new IllegalArgumentException("{{name}} must not be null.");
    }
    {{/required}}
    m_{{name}} = builder.m_{{name}};
    {{/allVars}}
  }


  {{#vars}}
  @Override
  {{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}public {{{datatypeWithEnum}}} {{getter}}() {
        return m_{{name}};
    }
    
  {{/vars}}
  
    public static class {{classname}}Builder implements {{name}}EntBuilder {
    
        public {{classname}}Builder(){
            {{#parent}}super();{{/parent}}
        }
    
        {{#allVars}}
        private {{{datatypeWithEnum}}} m_{{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}};
        {{/allVars}}

        {{#allVars}}
        {{^isReadOnly}}
        @Override
        public {{classname}}Builder {{setter}}({{{datatypeWithEnum}}} {{name}}) {
             {{#required}}
             if({{name}} == null) {
                 throw new IllegalArgumentException("{{name}} must not be null.");
             }
             {{/required}}
             m_{{name}} = {{name}};
             return this;
        }

        {{/isReadOnly}}        
        {{/allVars}}
        
        @Override
        public {{classname}} build() {
            return new {{classname}}(this);
        }
    
    }

}
{{/model}}
{{/models}}
